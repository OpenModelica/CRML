/*
 * Gradle build file for the CRML compiler
 */

plugins {
    id 'application'
 	id 'antlr'
    id 'com.github.johnrengelman.shadow' version "8.1.1" 
    id 'java'
 }

 repositories{
 	mavenCentral()
 }

 dependencies {
    antlr "org.antlr:antlr4:4.9.2"
    
    implementation ('org.apache.logging.log4j:log4j-api') {
        version {
            strictly '[2.17.0]'
        }
    }
    implementation ('org.apache.logging.log4j:log4j-core') {
        version {
            strictly '[2.17.0]'
        }
    }
   
    implementation(platform("org.junit:junit-bom:5.10.1"))
    implementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    implementation "org.junit.platform:junit-platform-launcher"

    implementation 'io.github.hakky54:logcaptor:2.7.10'
    implementation "org.jcommander:jcommander:1.83"

    implementation "org.junit.platform:junit-platform-reporting:1.10.1"

}

    sourceSets { // adding tests to source directories to run test suite
    main {
        java {
            srcDir 'src/test/java'
        }
    }
}
    

task(crmlc, dependsOn: 'classes', type: JavaExec) {
   mainClass = 'crml.compiler.CRMLC'
   classpath = sourceSets.main.runtimeClasspath
}

task printSourceSetInformation { // for debugging purposes
    doLast{
        sourceSets.each { srcSet ->
            println "["+srcSet.name+"]"
            print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
            print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
            println ""
        }
    }
}
application {
    mainClass = 'crml.compiler.CRMLC'
}

generateGrammarSource {

    arguments += ["-visitor", "-long-messages", "-Xlog", "-listener",  "-lib", "src/main/antlr/grammar"]

}

test {	
	 useJUnitPlatform()
	 testLogging {
		events "passed", "skipped", "failed"
	}
	test.ignoreFailures true
}

jar {
  manifest {
   attributes 'Main-Class': 'crml.compiler.CRMLC'
   attributes 'Multi-Release': 'true'
  }
}

apply plugin: 'java'
compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

tasks.withType(Test).configureEach {
    def outputDir = reports.junitXml.outputLocation
    jvmArgumentProviders << ({
        [
            "-Djunit.platform.reporting.open.xml.enabled=true",
            "-Djunit.platform.reporting.output.dir=${outputDir.get().asFile.absolutePath}"
        ]
    } as CommandLineArgumentProvider)
}