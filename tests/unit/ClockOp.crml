model ClockOp is {

 Operator [ Clock ] Clock C 'inside' Period P = C filter ((tick >= (P start)) and ((P end) >= tick ));

 Operator [ Integer ] 'count' Clock C 'inside' Period P = card (C 'inside' P);

 Operator [ Clock ] Boolean b 'becomes true' = Clock b;

 //Operator [ Clock] Boolean b 'becomes false' = Clock not b;

 Operator [ Clock] Boolean b 'becomes true inside' Period P = (b 'becomes true') 'inside' P;

 //Operator [ Clock ] Boolean b 'becomes false inside' Period P = (b 'becomes false') 'inside' P;

 //Operator [ Boolean ] 'check' Boolean phi 'over' Periods P = and ('evaluate' phi 'over' P);

 //Operator [ Boolean ] evaluate Boolean phi over Period P = integrate (('decide' phi 'over' P) * diff (trim phi on P)) on P;

 //Operator decide is Operator [ Boolean ] 'decide' Boolean phi 'over' Period P = phi or (P end));

};
