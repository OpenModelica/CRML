// ETL library

library ETL is {
	// Operators on Boolean
	// Logical disjunction
	Template b1 'or' b2 = not (not b1 and not b2);

	// Exclusive logical disjunction
	Template b1 'xor' b2 = (b1 'or' b2) and not (b1 and b2);
  
	// Logical inference
	Template b1 'implies' b2 = not b1 'or' b2;

	// Operators on clocks
	// Filter clock ticks inside a time period
	Operator [ Clock ] Clock C 'inside' Period P 
		= C filter (tick C >= P start) and (tick C <= P end);
  
	// Count the occurrences of events inside a time period
	Operator [ Integer ] 'count' Clock C 'inside' Period P = card (C 'inside' P);
  
	// Operators on events
	// Events generated when a Boolean becomes true
	Operator [ Clock ] Boolean b 'becomes true' = new Clock b;
  
	// Events generated when a Boolean becomes false
	Operator [ Clock] Boolean b 'becomes false' = not b 'becomes true';

	// Events generated when a Boolean becomes true inside a time period
	Operator [ Clock] Boolean b 'becomes true inside' Period P 
		= (b 'becomes true') 'inside' P;

	// Events generated when a Boolean becomes false inside a time period
	Operator [ Clock] Boolean b 'becomes false inside' Period P 
		= (b 'becomes false') 'inside' P; 

	// Operators for the evaluation of requirements
	// Check
	Operator [ Boolean ] 'check' Boolean phi 'over' Periods P 
		= and ('evaluate' phi 'over' P);
  
	// Evaluate
	Operator [ Boolean ] 'evaluate' Boolean phi 'over' Period P 
		= integrate (('decide' phi 'over' P) * phi) on P;
  
	// Decide
	// Operator 'decide' is 
	Operator [ Boolean ] 'decide' Boolean phi 'over' Period P = phi 'or' (P end));
  
	Category c1 is Category increasing1 
		= { (>, >), (>=, >=), (<, >=), (<=, >), (==, >), (<>, >) };
	Category {} C1 is associate increasing1 with 'decide';

	Category c2 is Category increasing2 
		= { (>, >), (>=, >=), (<, >=), (<=, >) };
	Category {} C2 is associate increasing2 with 'decide';

	Operator [ Boolean ] 'id' Boolean b = b;
	Operator [ Boolean ] 'cte_false' Boolean b = false;
	Operator [ Boolean ] 'cte_true' Boolean b = true;

	Category c3 is Category varying1 = { ('id', 'cte_false') };
	Category {} C3 is associate varying1 with 'decide';

	Category c4 is Category varying2 = { ('id', 'cte_true') };
	Category {} C4 is associate varying2 with 'decide';
};

