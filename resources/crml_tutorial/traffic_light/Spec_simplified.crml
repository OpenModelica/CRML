model Spec is {
// Requirement model for the traffic light example

	// User-defined types and operators
		// Definition of Requirement type
		//Type Requirement is Boolean;

		// Extract of ETL library
		
			// Operators on Boolean
			// Logical disjunction
			Template b1 'or' b2 = not (not b1 and not b2);
		
			// Operators on events
			// Events generated when a Boolean becomes true
			Operator [ Clock ] Boolean b 'becomes true' = new Clock b;

			// Filter clock ticks inside a time period
			Operator [ Clock ] Clock C 'inside' Period P 
				= C filter ((tick >= (P start)) and (tick <= (P end)));
			
			// Operators on clocks
			// Count the occurrences of events inside a time period
			Operator [ Integer ] 'count' Clock C 'inside' Period P = card (C 'inside' P);

			// Evaluate
			Operator [ Boolean ] 'evaluate' Boolean phi 'over' Period P 
				= integrate (('decide' phi 'over' P) * phi) on P;
			
			// Operators for the evaluation of requirements
			// Check
			Operator [ Boolean ] 'check' Boolean phi 'over' Periods P 
				= and ('evaluate' phi 'over' P);
  
			// Decide
			//Operator 'decide' is 
			Operator [ Boolean ] 'decide' Boolean phi 'over' Period P = phi 'or' (P end);
  
			// Category c1 is Category increasing1 
				//= { (>, >), (>=, >=), (<, >=), (<=, >), (==, >), (<>, >) };

			Category increasing1 
				= { (>, >), (>=, >=), (<, >=), (<=, >), (==, >), (<>, >) };
			//Category {} C1 is associate increasing1 with 'decide';

			Operator [ Boolean ] 'id' Boolean b = b;
			Operator [ Boolean ] 'cte_false' Boolean b = false;
			Operator [ Boolean ] 'cte_true' Boolean b = true;

			// Category c3 is Category varying1 = { ('id', 'cte_false') };
			Category varying1 = { ('id', 'cte_false') };
			//Category {} C3 is associate varying1 with 'decide' 'over';
			
			Category varying2 = { ('id', 'cte_true') };
			//Category {} C4 is associate varying2 with 'decide' 'over';
				
		// Extract of FORM_L library
			// After events occur and before events occur
			Operator [ Periods ] 'after' Clock ev1 'before' Clock ev2 = new Periods ] ev1, ev2 [;

			// After events occur and for an elapsed time
			Operator [ Periods ] 'after' Clock ev 'for' Real d = new Periods ] ev, ev + d ]; 	
			
			// Checking that the number of event occurrences at the end of a time period is lower or higher than a threshold
			//Operator [ Boolean ] Periods P 'check count' Clock E '==' Integer n 
			//	= 'check'(('count' E 'inside' P) increasing1 '==' n) 'over' P;

			// Ensuring that a requirement is satisfied all along a time period
			Operator [ Boolean ] Periods P 'ensure' Boolean b 
				= ('check' ('count' (b 'becomes true') == 0) 'over' P) and (P 'check anytime' b);

			// Checking that a requirement is satisfied at any time instant of a time period
			Operator [ Boolean ] Periods P 'check anytime' Boolean b =  apply varying2 'check' 'id' b 'over' P;

			// Checking that a requirement is satisfied at the end of a time period
			Operator [ Boolean ] Periods P 'check at end' Boolean b = 'check' varying1 'id' b 'over' P;

	// List of external variables
	Boolean red is external;
	Boolean yellow is external;
	Boolean green is external;

	// Definition of requirements
	// req1: "After green, next step is yellow"
	Requirement req1 is
		'after' (green 'becomes true') 'before' (yellow 'becomes true')
		'check count' (red 'becomes true') '==' 0;

	// req2: "Step green should stay active for at least 30 seconds"
	Requirement req2 is
		'after' (green 'becomes true') 'for' 30
		'ensure' green;

	// req3: "After green becomes active + 30 seconds,
	//        next step should turn yellow within 0.2 seconds"
	Requirement req3 is
		'after' (green 'becomes true' + 30) 'for' 0.2
		'check at end' yellow;
};
